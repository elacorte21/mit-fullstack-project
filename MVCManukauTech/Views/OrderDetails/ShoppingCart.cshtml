@model IEnumerable<MVCManukauTech.ViewModels.OrderDetailsQueryForCart>

@{
    ViewBag.Title = "Shopping Cart";
    //count lines as cart is built on server, then pass to javascript
    int initialLineCount = 0;

    //List<MVCManukauTech.ViewModels.OrderDetailsQueryForCart> cart = ViewBag.Cart;
}

<h2>Shopping Cart</h2>
<h3>Order no @ViewBag.OrderId</h3>

<p>
  
</p>
<table class="table table-striped">
    <tr>
        <th>
        </th>
        <th>
            Product Name
        </th>
        <th>
            Quantity
        </th>
        <th>
            Price
        </th>
        <th>
            Discount(%)
        </th>
        <th>
            Discount Price
        </th>
        <th>
            Subtotal
        </th>
    </tr>

@foreach (var item in Model) {
    //assuming here that quantities are always integers.  Needs change for products like tonnes of beer.  Half a tonne can be enough.
    string quantity = Convert.ToInt32(item.Quantity).ToString();
    //Eddril - Added discount
    string unitCost = Convert.ToDouble(item.UnitCost).ToString("#0.00");
    decimal? discounted = (item.UnitCost - (item.UnitCost * (Convert.ToDecimal(item.DiscountPercent) / 100)));
    string discountedCost = Convert.ToDouble(discounted).ToString("#0.00");
    string subTotal = Convert.ToDouble(item.Quantity * discounted).ToString("#0.00");

    initialLineCount = item.LineNumber;
<tr>
    <td>
        <img src="~/images/products/@item.ImageFileName" style="width:10em" />
    </td>
    <td>
        @item.ProductName
    </td>
    <td>
        @*140903 JPC adding width:5em width:7em to control display input field sizes.
            That style tag is getting long - TODO move it into css and/or find similar existing bootstrap style
            2019-08-16 JPC adding onchange attribute to handle spinner controls in <input type="number"
        *@
        <input type="number" min="0" step="1" id="quantity_@item.LineNumber" style="text-align:right; width:5em"
               value="@quantity" maxlength="6" required onchange="xAjaxChangeQuantity(this.value, @item.LineNumber);"
               onkeyup="xAjaxChangeQuantity(this.value, @item.LineNumber);" />
    </td>
    <td>
        @*TODO - make use of data-unitcost custom attribute to store more precise unitcost
            when it goes beyond 2 decimal places
            ref: http://html5doctor.com/html5-custom-data-attributes/*@
        <input type="text" id="unitcost_@item.LineNumber" style="text-align:right; width:7em"
               value="@unitCost" data-unitcost="@item.UnitCost" maxlength="10" readonly />
    </td>
    @*Eddril - Discount Start*@
    <td>
        <input type="text" id="percentage_@item.LineNumber" style="text-align:right; width:7em"
               value="@item.DiscountPercent" maxlength="10" readonly />
    </td>
    <td>
        <input type="text" id="discountedCost_@item.LineNumber" style="text-align:right; width:7em"
               value="@discountedCost" data-discountedcost="@item.DiscountedCost" maxlength="10" readonly />
    </td>
    @*Eddril - Discount End*@
    <td>
        <input type="text" id="subTotal_@item.LineNumber" style="text-align:right; width:7em"
               value="@subTotal" maxlength="10" readonly />
    </td>
</tr>
}

    @*Display Grand Total in the same table*@
    <tr>
        <td colspan="5"></td>
        <td style="font-weight:bold; text-align:right">
            Grand Total:
        </td>
        <td>
            <input type="text" id="grandTotal" style="text-align:right; width:7em"  readonly />
        </td>
    </tr>

    <tr>
        <td colspan="7" align="center">
            <a href="~/Store" class="btn btn-outline-dark">Continue Shopping</a> 
            <a href="~/OrderDetails/Checkout" class="btn btn-dark">Go to Checkout</a> 
        </td>
    </tr>

</table>

@*2014-09-01 JPC hidden fields as handy drop-boxes 
where C# code can drop values for Javascript to pick up and run with*@
<input id="hidLineCount" type="hidden" value="@initialLineCount" />

@*2017-03-19 JPC get more flexible about deployment in website sub-folders defined as apps
by "dropping" the ~ operator into HTML in a way that JavaScript can get to it
   2018-03-12 JPC ~ is not working here in ASP.NET Core 2.0 TODO investigate*@
<input id="rootDirectory" type="hidden" value="/" />

<script type="text/javascript">
    var lineCount = document.getElementById("hidLineCount").value;
    document.onload = DisplayGrandTotal();
    //AJAX!  ref  http://www.w3schools.com/ajax/ajax_xmlhttprequest_create.asp
    // Start by creating the xmlhttp object in Javascript to replace the older "form" methods
    var xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function () {
        ajaxCallback();
    }

    function DisplayGrandTotal() {
        //add up the subtotals to get a grand total
        var grandTotal = 0;
        for (i = 1; i <= lineCount; i++) {
            //educ - had i.toString at first, got errors, changed to i.toString() and it is sweet.
            var oeSubTotal = document.getElementById("subTotal_" + i.toString());
            grandTotal += oeSubTotal.value * 1;
        }
        oeGrandTotal = document.getElementById("grandTotal");
        oeGrandTotal.value = grandTotal.toFixed(2);
    }

    function xAjaxChangeQuantity(qty, lineNumber) {
        //update the server to keep in sync with change here
        // use parseFloat rather than the more obvious parseInt because of possible future options
        var quantity = parseFloat(qty);
        if (isNaN(quantity)) quantity = 0;
        //alert("quantity=" + quantity + " linenumber=" + lineNumber);
        var oeUnitCost = document.getElementById("discountedCost_" + lineNumber.toString());
        var unitCost = parseFloat(oeUnitCost.value);
        var oeSubTotal = document.getElementById("subTotal_" + lineNumber.toString());
        oeSubTotal.value = (quantity * unitCost).toString();
        DisplayGrandTotal();
        //alert("testing change of value at line " + lineNumber);

        //AJAX communication with the server - using POST and async
        var requestString = document.getElementById("rootDirectory").value + "OrderDetails/ShoppingCartUpdate";
        //JavaScript does not have the String.Format method of C# but we can get close 
        //and therefore keep to a similar style of code
        var postString = "Quantity={0}&LineNumber={1}";
        postString = postString.replace("{0}", quantity);
        postString = postString.replace("{1}", lineNumber);

        xmlhttp.open("POST", requestString, true);
        xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xmlhttp.send(postString);
    }

    function ajaxCallback() {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {
            var response = xmlhttp.responseText;
            //2014-09-03 JPC TODO replace the ugly alert user interface with something better
            //  alert is very much for early prototyping
            if (response == "ERROR") {
                alert("ERROR - please redo the previous data entry");
            } else {
                //alert(response);
            }
        }
    }

</script>