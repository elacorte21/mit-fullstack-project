@model IEnumerable<MVCManukauTech.ViewModels.SubscribeDetailsForCart>

@{
    ViewBag.Title = "Shopping Cart";
    //count lines as cart is built on server, then pass to javascript
    int initialLineCount = 0;

    //List<MVCManukauTech.ViewModels.OrderDetailsQueryForCart> cart = ViewBag.Cart;
}

<h2>Membership Order</h2>

<table class="table">
    <thead>
        <tr>
            <th>
                Membership Type
            </th>
            <th>
                Cost
            </th>
            <th>
                Total
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            string subTotal = Convert.ToDouble(Convert.ToDouble(item.Quantity) * Convert.ToDouble(item.MembershipCost)).ToString("#0.00");
            //assuming here that quantities are always integers.  Needs change for products like tonnes of beer.  Half a tonne can be enough.
            string quantity = Convert.ToInt32(item.Quantity).ToString();
            //Note that for some industries you would have more than 2 decimal places - 4 is common - unitcost can be fractional
            string membershipCost = Convert.ToDouble(item.MembershipCost).ToString("#0.00");
            initialLineCount = item.LineNumber;
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.MembershipName)
                </td>
                <td>
                    @*TODO - make use of data-unitcost custom attribute to store more precise unitcost
                        when it goes beyond 2 decimal places
                        ref: http://html5doctor.com/html5-custom-data-attributes/*@
                    <input type="text" id="membershipCost_@item.LineNumber" style="text-align:right; width:7em"
                           value="@membershipCost" data-unitcost="@item.MembershipCost" maxlength="10" readonly />
                </td>
                <td>
                    @* Eddril - Arranged fields *@
                    <input type="hidden" id="quantity_@item.LineNumber" value="1" />
                    <input type="hidden" id="subTotal_@item.LineNumber" style="text-align:right; width:7em" value="@subTotal" maxlength="10" readonly />
                    <input type="text" id="grandTotal" style="text-align:right; width:7em" readonly />
                </td>
            </tr>
        }

        <tr>
            <td></td>
            <td></td>
            <td>
                <a href="~/SubscribeDetails/Checkout" class="btn btn-dark">Go to Checkout</a>
            </td>
        </tr>
</table>

@*2014-09-01 JPC hidden fields as handy drop-boxes
    where C# code can drop values for Javascript to pick up and run with*@
<input id="hidLineCount" type="hidden" value="@initialLineCount" />

@*2017-03-19 JPC get more flexible about deployment in website sub-folders defined as apps
    by "dropping" the ~ operator into HTML in a way that JavaScript can get to it
       2018-03-12 JPC ~ is not working here in ASP.NET Core 2.0 TODO investigate*@
<input id="rootDirectory" type="hidden" value="/" />

<script type="text/javascript">
    var lineCount = document.getElementById("hidLineCount").value;
    document.onload = DisplayGrandTotal();
    //AJAX!  ref  http://www.w3schools.com/ajax/ajax_xmlhttprequest_create.asp
    // Start by creating the xmlhttp object in Javascript to replace the older "form" methods
    var xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function () {
        ajaxCallback();
    }

    function DisplayGrandTotal() {
        //add up the subtotals to get a grand total
        var grandTotal = 0;
        for (i = 1; i <= lineCount; i++) {
            //educ - had i.toString at first, got errors, changed to i.toString() and it is sweet.
            var oeSubTotal = document.getElementById("subTotal_" + i.toString());
            grandTotal += oeSubTotal.value * 1;
        }
        oeGrandTotal = document.getElementById("grandTotal");
        oeGrandTotal.value = grandTotal.toFixed(2);
    }

    function xAjaxChangeQuantity(qty, lineNumber) {
        //update the server to keep in sync with change here
        // use parseFloat rather than the more obvious parseInt because of possible future options
        var quantity = parseFloat(qty);
        if (isNaN(quantity)) quantity = 0;
        //alert("quantity=" + quantity + " linenumber=" + lineNumber);
        var oeMembershipCost = document.getElementById("membershipcost_" + lineNumber.toString());
        var membershipCost_ = parseFloat(oeMembershipCost.value);
        var oeSubTotal = document.getElementById("subTotal_" + lineNumber.toString());
        oeSubTotal.value = (quantity * membershipCost_).toString();
        DisplayGrandTotal();
        //alert("testing change of value at line " + lineNumber);

        //AJAX communication with the server - using POST and async
        var requestString = document.getElementById("rootDirectory").value + "SubscribeDetails/ShoppingCartUpdate";
        //JavaScript does not have the String.Format method of C# but we can get close
        //and therefore keep to a similar style of code
        var postString = "Quantity={0}&LineNumber={1}";
        postString = postString.replace("{0}", quantity);
        postString = postString.replace("{1}", lineNumber);

        xmlhttp.open("POST", requestString, true);
        xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        xmlhttp.send(postString);
    }

    function ajaxCallback() {
        if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {
            var response = xmlhttp.responseText;
            //2014-09-03 JPC TODO replace the ugly alert user interface with something better
            //  alert is very much for early prototyping
            if (response == "ERROR") {
                alert("ERROR - please redo the previous data entry");
            } else {
                //alert(response);
            }
        }
    }

</script>